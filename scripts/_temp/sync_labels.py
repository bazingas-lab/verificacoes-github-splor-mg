#!/usr/bin/env python3
"""
Script para sincronizar labels do arquivo labels.yaml diretamente com o GitHub.
Este script l√™ o arquivo YAML e aplica as labels aos reposit√≥rios.
"""

import yaml
import os
import sys
from pathlib import Path
from labels_manager import GitHubLabelsManager

def load_labels_from_yaml(yaml_file: str) -> dict:
    """
    Carrega as labels do arquivo YAML.
    
    Args:
        yaml_file: Caminho para o arquivo YAML
        
    Returns:
        Dicion√°rio com as labels no formato esperado
    """
    try:
        with open(yaml_file, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
        
        if not data or 'labels' not in data:
            raise ValueError("Arquivo YAML deve conter uma chave 'labels'")
        
        labels_dict = {}
        
        for label in data['labels']:
            if 'name' in label and 'color' in label:
                labels_dict[label['name']] = {
                    'color': label['color'],
                    'description': label.get('description', '')
                }
        
        return labels_dict
        
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo YAML: {e}")
        return {}

def print_labels_summary(labels_dict: dict) -> None:
    """
    Imprime um resumo das labels carregadas.
    
    Args:
        labels_dict: Dicion√°rio com as labels
    """
    print(f"\nüìã Labels carregadas do YAML ({len(labels_dict)} encontradas):")
    print("=" * 60)
    
    for name, config in labels_dict.items():
        print(f"  ‚Ä¢ {name} ({config['color']}) - {config['description']}")

def main():
    """Fun√ß√£o principal do script."""
    yaml_file = "labels.yaml"
    
    # Verifica se o arquivo YAML existe
    if not os.path.exists(yaml_file):
        print(f"‚ùå Arquivo {yaml_file} n√£o encontrado!")
        print("Certifique-se de que o arquivo est√° na raiz do projeto.")
        sys.exit(1)
    
    print(f"üîÑ Carregando labels do arquivo {yaml_file}...")
    
    # Carrega as labels do YAML
    labels_dict = load_labels_from_yaml(yaml_file)
    
    if not labels_dict:
        print("‚ùå Nenhuma label foi carregada do arquivo YAML")
        sys.exit(1)
    
    print_labels_summary(labels_dict)
    
    # Pergunta ao usu√°rio se quer aplicar
    print(f"\nüí° O que voc√™ gostaria de fazer?")
    print("1. Aplicar a um reposit√≥rio espec√≠fico")
    print("2. Aplicar a todos os reposit√≥rios")
    print("3. Apenas visualizar (n√£o aplicar)")
    
    choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
    
    if choice == "3":
        print("‚úÖ Opera√ß√£o cancelada. Labels apenas visualizadas.")
        return
    
    try:
        # Inicializa o gerenciador
        manager = GitHubLabelsManager()
        
        if choice == "1":
            repo_name = input("Nome do reposit√≥rio: ").strip()
            if repo_name:
                print(f"\nüöÄ Aplicando labels ao reposit√≥rio: {repo_name}")
                manager.apply_labels_to_repo(repo_name, labels_dict)
            else:
                print("‚ùå Nome do reposit√≥rio n√£o fornecido.")
                
        elif choice == "2":
            confirm = input("‚ö†Ô∏è  Tem certeza que quer aplicar a TODOS os reposit√≥rios? (y/N): ").strip().lower()
            if confirm in ['y', 'yes']:
                print(f"\nüöÄ Aplicando labels a todos os reposit√≥rios...")
                manager.apply_labels_to_all_repos(labels_dict)
            else:
                print("‚úÖ Opera√ß√£o cancelada.")
                
        else:
            print("‚ùå Op√ß√£o inv√°lida.")
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        print("\nüí° Verifique se:")
        print("  ‚Ä¢ O arquivo .env est√° configurado corretamente")
        print("  ‚Ä¢ O GITHUB_TOKEN tem as permiss√µes necess√°rias")
        print("  ‚Ä¢ O GITHUB_ORG est√° correto")

if __name__ == "__main__":
    main()
